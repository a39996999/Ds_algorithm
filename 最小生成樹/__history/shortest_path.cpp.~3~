//---------------------------------------------------------------------------

#include <vcl.h>
#include <vector>
#pragma hdrstop

#include "shortest_path.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

using namespace std ;

TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	Memo1 -> Clear() ;
	Memo2 -> Clear() ;
    Memo3 -> Clear() ;
}
//---------------------------------------------------------------------------


vector<vector<int>> g ;
int mode = 0 ;

void __fastcall TForm1::Button2Click(TObject *Sender)
{
	int n = StrToInt(Edit1 -> Text) ;
	int weight = StrToInt(Edit2 -> Text) ;
	int max_weight = StrToInt(Edit3 -> Text) ;

	g = vector<vector<int>>(n ,vector<int>(n ,0)) ;

	if (mode == 0){
		for (int i = 0 ; i < n ; i++) {
			for (int j = 0 ; j < n; j++) {
				if (i == j){
					g[i][j] = 0 ;
					continue ;
				}
				int temp = rand()%weight+1 ;

				if (temp > max_weight)
					g[i][j] = 2e9 ;
				else
					g[i][j] = temp ;
			}
		}
	}
	if (mode == 1){
		for (int i = 0 ; i < n ; i++){
			for (int j = i ; j < n ; j++){
				if (i == j){
					g[i][j] = 0 ;
					continue ;
				}

				int temp = rand()%weight+1 ;

				if (temp > max_weight){
					g[i][j] = 2e9 ;
					g[j][i] = 2e9 ;
				}
				else{
					g[i][j] = temp ;
					g[j][i] = temp ;
				}
			}
		}
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CheckBox1Click(TObject *Sender)
{
	mode = 1 ;
}
//---------------------------------------------------------------------------

